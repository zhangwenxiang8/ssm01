package com.neuedu.适配器模式;

public class test {
    public static void main(String[] args) {
        cat c=new Imlcat();
        dog d=new Imldog();
        pet p=new Imlpet适配器();
        p.work(c);
        p.work(d);

    }
}


    /*优点
1.将目标类和适配者类解耦，通过引入一个适配器类来重用现有的适配者类，而无须修改原有代码。
2.增加了类的透明性和复用性，将具体的实现封装在适配者类中，对于客户端类来说是透明的，而且提高了适配者的复用性。
3.灵活性和扩展性都非常好，通过使用配置文件，可以很方便地更换适配器，
也可以在不修改原有代码的基础上增加新的适配器类，完全符合“开闭原则”。*/


    /*
    使用环境:
    在以下情况下可以使用适配器模式：

1. 系统需要使用现有的类，而这些类的接口不符合系统的需要。
2. 想要建立一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作。*/
